{"changed":false,"filter":false,"title":"application.py","tooltip":"/mashup/application.py","value":"import os\nimport re\nfrom flask import Flask, jsonify, render_template, request, url_for\nfrom flask_jsglue import JSGlue\n\nfrom cs50 import SQL\nfrom helpers import lookup\n# configure application\napp = Flask(__name__)\nJSGlue(app)\n\n# ensure responses aren't cached\nif app.config[\"DEBUG\"]:\n    @app.after_request\n    def after_request(response):\n        response.headers[\"Cache-Control\"] = \"no-cache, no-store, must-revalidate\"\n        response.headers[\"Expires\"] = 0\n        response.headers[\"Pragma\"] = \"no-cache\"\n        return response\n\n# configure CS50 Library to use SQLite database\ndb = SQL(\"sqlite:///mashup.db\")\n\n\n@app.route(\"/\")\ndef index():\n    \"\"\"Render map.\"\"\"\n    if not os.environ.get(\"API_KEY\"):\n        raise RuntimeError(\"API_KEY not set\")\n    return render_template(\"index.html\", key=os.environ.get(\"API_KEY\"))\n\n\n@app.route(\"/articles\")\ndef articles():\n    \"\"\"Look up articles for geo.\"\"\"\n    if request.method == \"GET\":\n        article = lookup(request.form.get(\"geo\"))\n    # TODO\n    return jsonify([article])\n\n\n@app.route(\"/search\", methods=[\"GET\"])\ndef search():\n    \"\"\"Search for places that match query.\"\"\"\n    q = request.args.get(\"q\")\n    area = db.execute(\"SELECT * FROM places WHERE postal_code = :q\", q=q)\n    # TODO\n    return jsonify(area)\n\n\n@app.route(\"/update\")\ndef update():\n    rows = None\n    \"\"\"Find up to 10 places within view.\"\"\"\n\n    # explode southwest corner into two variables\n    (sw_lat, sw_lng) = [float(s) for s in request.args.get(\"sw\").split(\",\")]\n\n    # explode northeast corner into two variables\n    (ne_lat, ne_lng) = [float(s) for s in request.args.get(\"ne\").split(\",\")]\n\n    # find 10 cities within view, pseudorandomly chosen if more within view\n    if (sw_lng <= ne_lng):\n        # doesn't cross the antimeridian\n        rows = db.execute(\"\"\"SELECT * FROM places\n            WHERE :sw_lat <= latitude AND latitude <= :ne_lat AND (:sw_lng <= longitude AND longitude <= :ne_lng)\n            GROUP BY country_code, place_name, admin_code1\n            ORDER BY RANDOM()\n            LIMIT 10\"\"\", sw_lat=sw_lat, ne_lat=ne_lat, sw_lng=sw_lng, ne_lng=ne_lng)\n\n    else:\n        if not request.args.get(\"sw\"):\n            # crosses the antimeridian\n            rows = db.execute(\"\"\"SELECT * FROM places\n                WHERE :sw_lat <= latitude AND latitude <= :ne_lat AND (:sw_lng <= longitude OR longitude <= :ne_lng)\n                GROUP BY country_code, place_name, admin_code1\n                ORDER BY RANDOM()\n                LIMIT 10\"\"\", sw_lat=sw_lat, ne_lat=ne_lat, sw_lng=sw_lng, ne_lng=ne_lng)\n\n    # output places as JSON\n    return jsonify(rows)\n","undoManager":{"mark":-1,"position":-1,"stack":[]},"ace":{"folds":[],"scrolltop":510,"scrollleft":0,"selection":{"start":{"row":77,"column":29},"end":{"row":77,"column":29},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":34,"state":"start","mode":"ace/mode/python"}},"timestamp":1519590728000}